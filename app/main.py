from fastapi import FastAPI, HTTPException, Query
from pydantic import BaseModel
import spacy

app = FastAPI(title="Word Embedding API", version="1.0")

# —— 启动时加载一次 spaCy 模型（避免热重载重复加载）——
nlp = None
@app.on_event("startup")
def load_model_once():
    global nlp
    if nlp is None:
        nlp = spacy.load("en_core_web_md")

# —— 返回结构（用于文档 & 校验）——
class EmbedResponse(BaseModel):
    input: str
    vector_dim: int
    has_vector: bool
    vector: list[float]
    note: str

@app.get("/")
def read_root():
    return {"message": "Hello, FastAPI with UV!"}

@app.get("/embedding", response_model=EmbedResponse)
def get_embedding(
    word: str = Query(..., min_length=1, max_length=64, description="Enter a word or phrase")
):
    """
    Given a word/phrase, returns the embedding vector generated by spaCy.
    - Words: Returns token vectors
    - Phrase: Returns the entire doc vector
-    Only the first 20 dimensions are displayed to keep the response lightweight
    """
    doc = nlp(word)

    # 单词：取 token；短语：取整句向量
    if len(doc) == 1:
        token = doc[0]
        if not token.has_vector:
            raise HTTPException(status_code=404, detail=f"No vector found for '{word}'")
        vector = token.vector
    else:
        if not doc.has_vector:
            raise HTTPException(status_code=404, detail=f"No vector found for '{word}'")
        vector = doc.vector

    return {
        "input": word,
        "vector_dim": len(vector),
        "has_vector": True,
        "vector": vector.tolist()[:20],  # 仅前 20 维
        "note": "Only the first 20 dimensions are shown; see vector_dim for full size.",
    }